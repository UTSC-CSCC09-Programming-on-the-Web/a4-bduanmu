name: Publish Web Gallery to GHCR

on:
  push:
    # Only run this workflow if it is a commit to main.
    branches:
      - main

env:
  IMAGE_NAME: webgallery-bduanmu

jobs:
  # Push image to GitHub Packages.
  # See also https://docs.docker.com/docker-hub/builds/
  push:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
      - uses: actions/checkout@v2

      - name: Build image
        run: docker build . --file Dockerfile --tag $IMAGE_NAME

      - name: Log into GitHub Container Registry
        # TODO: Create a Personal Access Tokens (PAT) with `read:packages` and `write:packages` scopes and save it as an Actions secret `CR_PAT`
        run: echo "${{ secrets.CR_PAT }}" | docker login https://ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Push image to GitHub Container Registry
        run: |
          IMAGE_ID=ghcr.io/${{ github.repository_owner }}/$IMAGE_NAME
          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          # Use Docker `latest` tag convention
          [ "$VERSION" == "main" ] && VERSION=latest
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION

      - name: SSH Remote Commands
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: "138.197.142.29"
          username: root
          key: ${{ secrets.KEY }}
          script: |
            # Navigate to your app directory
            cd /root/a4-bduanmu
            
            # Create .env file with environment variables
            cat > .env << EOF
            # Environment Variables for Web Gallery App
            # JWT secret key - used for signing JWT tokens
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            JWT_EXPIRES_IN=24h
            EOF
            
            # Set proper permissions for the .env file
            chmod 600 .env
            
            # Wait a bit for the image to be available
            sleep 180
            
            # Deploy the application
            docker compose pull && docker compose up -d